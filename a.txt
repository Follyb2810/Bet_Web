import { BaseEditor, Editor } from "slate";
import { Transforms, Element as SlateElement } from "slate";
import { ReactEditor } from "slate-react";

export type TextAlign = "left" | "center" | "right" | "justify";



export type CustomElement = {
  type: "paragraph" | "code" | "bulleted-list" | "numbered-list" | "list-item"|"link" | 'file';
  url?: string;
  fileName?: string;
  align?: TextAlign;
  indent?: number;
  children: CustomText[];
};

export type CustomText = {
  text: string;
  bold?: boolean;
  italic?: boolean;
  underline?: boolean;
  fontSize?:string
  fontFamily?:string
};

declare module "slate" {
  interface CustomTypes {
    Editor: BaseEditor & ReactEditor;
    Element: CustomElement;
    Text: CustomText;
  }
}

export const CustomEditor = {
  isBoldMarkActive(editor: Editor) {
    const marks = Editor.marks(editor);
    return marks?.bold === true;
  },

  toggleBoldMark(editor: Editor) {
    const isActive = CustomEditor.isBoldMarkActive(editor);
    if (isActive) {
      Editor.removeMark(editor, "bold");
    } else {
      Editor.addMark(editor, "bold", true);
    }
  },

  isCodeBlockActive(editor: Editor) {
    const [match] = Editor.nodes(editor, {
      match: (n) =>
        !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === "code",
    });
    return !!match;
  },

  toggleCodeBlock(editor: Editor) {
    const isActive = CustomEditor.isCodeBlockActive(editor);
    Transforms.setNodes(
      editor,
      { type: isActive ? "paragraph" : "code" },
      {
        match: (n) => SlateElement.isElement(n) && Editor.isBlock(editor, n),
      }
    );
  },

  toggleMark(editor: Editor, format: "bold" | "italic" | "underline") {
    const marks = Editor.marks(editor) as Partial<CustomText> | null;
    const isActive = marks?.[format] === true;
    if (isActive) {
      Editor.removeMark(editor, format);
    } else {
      Editor.addMark(editor, format, true);
    }
  },

  setAlignment(editor: Editor, align: TextAlign) {
    Transforms.setNodes(
      editor,
      { align },
      {
        match: (n) => SlateElement.isElement(n) && Editor.isBlock(editor, n),
      }
    );
  },

  toggleList(editor: Editor, type: "bulleted-list" | "numbered-list") {
    const isActive = CustomEditor.isListActive(editor, type);
    Transforms.unwrapNodes(editor, {
      match: (n) =>
        SlateElement.isElement(n) &&
        (n.type === "bulleted-list" || n.type === "numbered-list"),
      split: true,
    });

    const newType = isActive ? "paragraph" : "list-item";
    Transforms.setNodes(editor, { type: newType });

    if (!isActive) {
      const block = { type, children: [] };
      Transforms.wrapNodes(editor, block as SlateElement);
    }
  },

  isListActive(editor: Editor, type: "bulleted-list" | "numbered-list") {
    const [match] = Editor.nodes(editor, {
      match: (n) => SlateElement.isElement(n) && n.type === type,
    });
    return !!match;
  },

  increaseIndent(editor: Editor) {
    Transforms.setNodes(
      editor,
      { indent: 1 },
      {
        match: (n) => SlateElement.isElement(n) && Editor.isBlock(editor, n),
        mode: "all",
      }
    );
  },

  decreaseIndent(editor: Editor) {
    Transforms.setNodes(
      editor,
      { indent: 0 },
      {
        match: (n) => SlateElement.isElement(n) && Editor.isBlock(editor, n),
        mode: "all",
      }
    );
  },
  toggleFontSize(editor: Editor, size: string) {
    editor.addMark("fontSize", size);
  },

  toggleFontFamily(editor: Editor, font: string) {
    editor.addMark("fontFamily", font);
  },
};


//?
import { useCallback } from "react";
import { RenderElementProps, RenderLeafProps } from "slate-react";
import { AlignableElement, Leaf } from "./AlignableElement";

export const useRenderers = () => {
  const renderElement = useCallback((props: RenderElementProps) => {
    return <AlignableElement {...props} />;
  }, []);

  const renderLeaf = useCallback((props: RenderLeafProps) => {
    return <Leaf {...props} />;
  }, []);

  return { renderElement, renderLeaf };
};


// import { useCallback } from "react";
// import { RenderElementProps, RenderLeafProps } from "slate-react";
// import { AlignableElement, Leaf } from "./AlignableElement";

// // Optional: improve naming for clarity
// export const useSlateRenderers = () => {
//   // For block-level elements (e.g., paragraphs, links, files)
//   const renderElement = useCallback((props: RenderElementProps) => {
//     const { element, attributes, children } = props;

//     switch (element.type) {
//       case "file":
//         return (
//           <div {...attributes}>
//             <a href={(element as any).url} download>
//               {(element as any).name}
//             </a>
//             {children}
//           </div>
//         );
//       case "link":
//         return (
//           <a {...attributes} href={(element as any).url} target="_blank" rel="noopener noreferrer">
//             {children}
//           </a>
//         );
//       default:
//         return <AlignableElement {...props} />;
//     }
//   }, []);

//   // For inline text (e.g., font styles)
//   const renderLeaf = useCallback((props: RenderLeafProps) => {
//     const { attributes, children, leaf } = props;

//     let style: React.CSSProperties = {};
//     if (leaf.fontSize) style.fontSize = leaf.fontSize;
//     if (leaf.fontFamily) style.fontFamily = leaf.fontFamily;

//     return (
//       <span {...attributes} style={style}>
//         <Leaf {...props} />
//       </span>
//     );
//   }, []);

//   return { renderElement, renderLeaf };
// };

//? 
// import { RenderElementProps, RenderLeafProps } from "slate-react";
// import { AlignableElement, Leaf } from "./AlignableElement";

// export const useRenderers = () => {
// const renderElement = useCallback((props: RenderElementProps) => {
// return \<AlignableElement {...props} />;
// }, \[]);

// const renderLeaf = useCallback((props: RenderLeafProps) => {
// return \<Leaf {...props} />;
// }, \[]);
// const renderLeafy = useCallback((props: RenderLeafProps) => {
// const { attributes, children, leaf } = props;

// let style: React.CSSProperties = {};
// if (leaf.fontSize) {
// style.fontSize = leaf.fontSize;
// }
// if (leaf.fontFamily) {
// style.fontFamily = leaf.fontFamily;
// }

// return \<span {...attributes} style={style}>{children}</span>;
// }, \[]);

// const renderFileElement = useCallback((props: RenderLeafProps) => {
// const { element, attributes, children } = props;

// switch (element.type) {
// case "file":
// return (
// \<div {...attributes}> <a href={element.url} download>{element.name}</a>
// {children} </div>
// );
// // include link here as well
// case "link":
// return \<a {...attributes} href={element.url}>{children}</a>;
// default:
// return \<p {...attributes}>{children}</p>;
// }
// }, \[]);

// return { renderElement, renderLeaf ,renderLeafy};
// };



//?

import { Editor, Node, Transforms } from "slate";
import { useSlate } from "slate-react";

const insertFile = (editor:Editor, fileUrl:string, fileName:string) => {
  const fileNode:Node = {
    type: "file",
    url: fileUrl,
    fileName: fileName,
    children: [{ text: "" }],
  };
  Transforms.insertNodes(editor, fileNode);
};


export const FileUploadButton = () => {
  const editor = useSlate();

  const handleFileChange = async (event:React.ChangeEvent<HTMLInputElement>) => {
    if(!event.target.files)  return
    const file =event.target.files[0];
    if (file) {
      const fileUrl = URL.createObjectURL(file);
      insertFile(editor, fileUrl, file.name);
    }
  };

  return <input type="file" onChange={handleFileChange} />;
};

// ?
import { useSlate } from "slate-react";
import { CustomEditor } from "./CustomEditor";

export const FontToolbar = () => {
  const editor = useSlate();
  return (
    <>
      <select onChange={(e) => CustomEditor.toggleFontSize(editor, e.target.value)}>
        <option value="12px">12</option>
        <option value="16px">16</option>
        <option value="20px">20</option>
      </select>

      <select onChange={(e) => CustomEditor.toggleFontFamily(editor, e.target.value)}>
        <option value="Arial">Arial</option>
        <option value="Courier New">Courier</option>
        <option value="Georgia">Georgia</option>
      </select>
    </>
  );
};

//?
import { Editor, Transforms, Node } from "slate";

export const insertLink = (editor: Editor, url: string) => {
  const { selection } = editor;

  const text = selection ? Node.string(editor) : url;

  const link:Node = {
    type: "link",
    url,
    children: [{ text }],
  };

  Transforms.insertNodes(editor, link);
};
